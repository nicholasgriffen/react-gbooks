{"version":3,"sources":["components/Header/Header.js","components/SearchInput/SearchInput.js","components/Book/Book.js","components/Books/Books.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","id","SearchInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","props","target","value","setState","searchTerm","state","type","React","Component","Book","_ref","infoLink","title","authors","publisher","publishedDate","thumbnail","className","map","author","index","key","src","alt","concat","href","Books","books","book","Footer","App","asyncToGenerator","regenerator_default","mark","_callee","term","body","wrap","_context","prev","next","fetch","endpoint","encodeURIComponent","sent","json","status","abrupt","objectSpread","error","message","stop","_x","apply","arguments","process","bookProps","volumeInfo","imageLinks","_this2","SearchInput_SearchInput","debounce","extractBookPropsFromBook","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b831733.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <header>\n            <a id=\"logo\"></a>\n            <h1 id=\"headerTitle\"></h1>\n        </header>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'  \n\nexport default class SearchInput extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            searchTerm: ''\n        }\n    }\n\n    onChange = e => {\n        this.props.onChange(e.target.value)\n\n        this.setState({\n            searchTerm: e.target.value\n        })\n    }\n    \n    render() {\n        return (\n            <input \n                type=\"search\"\n                onChange={this.onChange}\n                value={this.state.searchTerm}\n            ></input>\n        )\n    }\n}\n\nSearchInput.propTypes = {\n    onChange: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'  \n\nexport default function Book({ infoLink, title, authors, publisher, publishedDate, thumbnail }) {\n    return (<li>\n                <h1 className=\"title\">{title}</h1>\n                <h2 className=\"authors\">By: {authors.map((author, index) => <span key={index}>author</span>)}</h2>\n                <img className=\"thumbnail\" src={thumbnail} alt={`Cover thumbnail for ${title}`}></img>\n                <p className=\"publisher\">Published by {publisher} on <span className=\"publishedDate\"> {publishedDate}</span></p>\n                <a className=\"infoLink\" href={infoLink}>More info on Google Books</a>\n            </li>)\n}\n\nBook.propTypes = {\n    infoLink: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    authors: PropTypes.arrayOf(PropTypes.string).isRequired,\n    publisher: PropTypes.string.isRequired,\n    publishedDate: PropTypes.string.isRequired,\n    thumbnail: PropTypes.string.isRequired\n}","import React from 'react'\nimport Book from '../Book/Book'\n\nexport default function Books({ books }) {\n    return (<ul>{books.map((book, index) => (\n        <Book key={index} book={book}></Book>\n    ))}</ul>)\n}\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <footer>\n            <span id=\"copyright\"></span>\n            <a id=\"poweredBy\"></a>\n            <a id=\"createdBy\"></a>\n        </footer>\n    )\n}","import React, { Component } from 'react'\nimport { debounce } from 'debounce'\nimport Header from '../Header/Header'\nimport SearchInput from '../SearchInput/SearchInput'\nimport Books from '../Books/Books'\nimport Footer from '../Footer/Footer'\n\nimport './App.css'\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      books: [],\n      endpoint: process.env.REACT_APP_API_ENDPOINT\n    }\n  }\n\n  extractBookPropsFromBook(book) {\n    const bookProps = {}\n\n    bookProps.infoLink = book.volumeInfo.infoLink\n    bookProps.title = book.volumeInfo.title \n    bookProps.authors = book.volumeInfo.authors\n    bookProps.publisher = book.volumeInfo.publisher\n    bookProps.publishedDate = book.volumeInfo.publishedDate\n    bookProps.thumbnail = book.volumeInfo.imageLinks.thumbnail \n    \n    return bookProps\n  }\n\n  onChange = async term => {\n   const books = await fetch(`${this.state.endpoint}/?search=${encodeURIComponent(term)}`)\n   const body = await books.json()\n\n    if (books.status !== 200) {\n      return this.setState({\n        ...this.state, \n        error: body.message\n      })  \n    } else {\n      return this.setState({\n        ...this.state, \n        books: body\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div id='react-app'>\n        <Header />\n        <SearchInput onChange={debounce(this.onChange, 500)}/>\n        {this.state.books && <Books \n        books={this.state.books.map(book => this.extractBookPropsFromBook(book))}/>}\n        <Footer />  \n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}