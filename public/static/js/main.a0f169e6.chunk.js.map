{"version":3,"sources":["components/Header/Header.js","components/SearchInput/SearchInput.js","components/Book/Book.js","components/Books/Books.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","style","display","justifyContent","id","src","alt","SearchInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","searchTerm","target","value","onSubmit","preventDefault","props","state","flexDirection","flex","type","React","Component","Book","_ref","book","title","volumeInfo","authors","thumbnail","imageLinks","publisher","publishedDate","infoLink","className","map","author","index","delimiter","length","key","concat","href","Books","books","list-style","App","onSearchSubmit","term","fetch","endpoint","encodeURIComponent","then","res","json","items","objectSpread","process","flex-direction","justify-content","SearchInput_SearchInput","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAEe,SAASA,IACpB,OACIC,EAAAC,EAAAC,cAAA,UACAC,MAAO,CAACC,QAAS,OAAQC,eAAkB,iBACvCL,EAAAC,EAAAC,cAAA,OAAKI,GAAG,OAAOC,IAAI,4EAA4EC,IAAI,aACnGR,EAAAC,EAAAC,cAAA,MAAII,GAAG,eAAP,4BCJSG,cACjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMJI,SAAW,SAAAC,GACPR,EAAKS,SAAS,CACVC,WAAYF,EAAEG,OAAOC,SATfZ,EAada,SAAW,SAAAL,GACPA,EAAEM,iBACFd,EAAKe,MAAMF,SAASb,EAAKgB,MAAMN,aAb/BV,EAAKgB,MAAQ,CACTN,WAAY,IAHNV,wEAmBV,OACAV,EAAAC,EAAAC,cAAA,QACAC,MAAO,CACHC,QAAS,OACTuB,cAAiB,MACjBtB,eAAkB,iBAElBkB,SAAUV,KAAKU,UACfvB,EAAAC,EAAAC,cAAA,SACIC,MAAO,CAACyB,KAAM,QACdC,KAAK,SACLZ,SAAUJ,KAAKI,SACfK,MAAOT,KAAKa,MAAMN,aAEtBpB,EAAAC,EAAAC,cAAA,UACIC,MAAO,CAACyB,KAAM,SADlB,kBAlC6BE,IAAMC,WCAhC,SAASC,EAATC,GAAsB,IAAPC,EAAOD,EAAPC,KAIpBC,EAASD,EAAKE,WAAWD,OAAmC,cAA1BD,EAAKE,WAAWD,MAAyBD,EAAKE,WAAWD,MAAQ,UACnGE,EAAUH,EAAKE,WAAWC,QAAUH,EAAKE,WAAWC,QAAU,CAAC,WAC/DC,EAAYJ,EAAKE,WAAWG,WAAaL,EAAKE,WAAWG,WAAWD,UAAY,IAChFE,EAAYN,EAAKE,WAAWI,UAAYN,EAAKE,WAAWI,UAAY,yBACpEC,EAAgBP,EAAKE,WAAWK,cAAgBP,EAAKE,WAAWK,cAAgB,cAChFC,EAAWR,EAAKE,WAAWM,SAAWR,EAAKE,WAAWM,SAAW,IAEvE,OAAQ1C,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIyC,UAAU,SAASR,GACvBnC,EAAAC,EAAAC,cAAA,MAAIyC,UAAU,WAAd,OAA6BN,EAAQO,IAAI,SAACC,EAAQC,GAC9C,IAAIC,EAMJ,OAJIA,EADAV,EAAQW,OAAS,GAAKF,EAAQT,EAAQW,OAAS,EACnC,KAEA,GAEThD,EAAAC,EAAAC,cAAA,QAAM+C,IAAKH,GAAQD,EAASE,MAEvC/C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,YAAYpC,IAAK+B,EAAW9B,IAAG,uBAAA0C,OAAyBf,KACvEnC,EAAAC,EAAAC,cAAA,KAAGyC,UAAU,aAAb,gBAAuCH,EAAvC,OAAqDxC,EAAAC,EAAAC,cAAA,QAAMyC,UAAU,iBAAhB,IAAkCF,IACvFzC,EAAAC,EAAAC,cAAA,KAAGyC,UAAU,WAAWQ,KAAMT,GAA9B,8BCxBD,SAASU,EAATnB,GAA0B,IAAToB,EAASpB,EAAToB,MAC5B,OAAQrD,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAACmD,aAAc,SAAUD,EAAMT,IAAI,SAACV,EAAMY,GAAP,OAClD9C,EAAAC,EAAAC,cAAC8B,EAAD,CAAMiB,IAAKH,EAAOZ,KAAMA,iBC+CjBqB,cA3Cb,SAAAA,IAAc,IAAA7C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,IACZ7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,QAYF2C,eAAiB,SAAAC,GACf,OAAOC,MAAK,GAAAR,OAAIxC,EAAKgB,MAAMiC,SAAf,aAAAT,OAAmCU,mBAAmBH,KAASI,KAAK,SAAAC,GAC/E,OAAOA,EAAIC,SACVF,KAAK,SAAAE,GACN,IAAMV,EAAQU,EAAKC,MACnB,OAAOtD,EAAKS,SAALR,OAAAsD,EAAA,EAAAtD,CAAA,GACHD,EAAKgB,MADF,CAEN2B,cAlBF3C,EAAKgB,MAAQ,CACX2B,MAAO,GACPM,SAAUO,UAJAxD,wEA0BZ,OACEV,EAAAC,EAAAC,cAAA,OAAKI,GAAG,YACRH,MAAO,CACLC,QAAS,OACT+D,iBAAkB,SAClBC,kBAAmB,kBAEnBpE,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAACmE,EAAD,CACC9C,SAAUV,KAAK2C,iBAChBxD,EAAAC,EAAAC,cAACkD,EAAD,CACCC,MAAOxC,KAAKa,MAAM2B,gBAvCTtB,aCKEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.a0f169e6.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <header\n        style={{display: \"flex\", \"justifyContent\": \"space-around\"}}>\n            <img id=\"logo\" src=\"http://icons.iconarchive.com/icons/paomedia/small-n-flat/96/book-icon.png\" alt=\"Book PNG\"/>\n            <h2 id=\"headerTitle\">Search Google Books</h2>\n        </header>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'  \n\nexport default class SearchInput extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            searchTerm: ''\n        }\n    }\n\n    onChange = e => {\n        this.setState({\n            searchTerm: e.target.value\n        })\n    }\n\n    onSubmit = e => {\n        e.preventDefault()\n        this.props.onSubmit(this.state.searchTerm)\n    }\n    \n    render() {\n        return (\n        <form \n        style={{\n            display: \"flex\", \n            \"flexDirection\": \"row\",\n            \"justifyContent\": \"space-between\" \n            }}\n            onSubmit={this.onSubmit}>\n            <input\n                style={{flex: \"auto\"}}\n                type=\"search\"\n                onChange={this.onChange}\n                value={this.state.searchTerm}\n            ></input>\n            <button\n                style={{flex: \"auto\"}}\n                >Search</button>    \n        </form>\n        )\n    }\n}\n\nSearchInput.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'  \n\nexport default function Book({book}) {\n    // default props or params likely better solution here\n    // but had difficulty getting past TypeErrors with those solutions\n    \n    const title = (book.volumeInfo.title && book.volumeInfo.title !== 'Undefined') ? book.volumeInfo.title : 'Unknown'\n    const authors = book.volumeInfo.authors ? book.volumeInfo.authors : ['Unknown']\n    const thumbnail = book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.thumbnail : '#'\n    const publisher = book.volumeInfo.publisher ? book.volumeInfo.publisher : 'Unpublished or Unknown'\n    const publishedDate = book.volumeInfo.publishedDate ? book.volumeInfo.publishedDate : 'Unpublished'\n    const infoLink = book.volumeInfo.infoLink ? book.volumeInfo.infoLink : '#'\n\n    return (<li>\n                <h1 className=\"title\">{title}</h1>\n                <h2 className=\"authors\">By: {authors.map((author, index) => {\n                    let delimiter\n                    if (authors.length > 1 && index < authors.length - 1) {\n                        delimiter = ', '\n                    } else {\n                        delimiter = ''\n                    }\n                    return <span key={index}>{author + delimiter}</span>\n                })}</h2>\n                <img className=\"thumbnail\" src={thumbnail} alt={`Cover thumbnail for ${title}`}></img>\n                <p className=\"publisher\">Published by {publisher} on <span className=\"publishedDate\"> {publishedDate}</span></p>\n                <a className=\"infoLink\" href={infoLink}>More info on Google Books</a>\n            </li>)\n}\n\n    Book.propTypes = {\n        book: PropTypes.shape({\n            volumeInfo: PropTypes.shape({\n                infoLink: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                authors: PropTypes.arrayOf(PropTypes.string).isRequired,\n                publisher: PropTypes.string.isRequired,\n                publishedDate: PropTypes.string.isRequired,\n                imageLinks: PropTypes.shape({\n                    thumbnail: PropTypes.string.isRequired\n                })\n            })\n        })\n    }","import React from 'react'\nimport Book from '../Book/Book'\n\nexport default function Books({ books }) {\n    return (<ul style={{\"list-style\": \"none\"}}>{books.map((book, index) => (\n        <Book key={index} book={book}></Book>\n    ))}</ul>)\n}\n","import React, { Component } from 'react'\nimport Header from '../Header/Header'\nimport SearchInput from '../SearchInput/SearchInput'\nimport Books from '../Books/Books'\n\nimport './App.css'\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      books: [],\n      endpoint: process.env.REACT_APP_API_ENDPOINT, \n    }\n  }\n  \n  // running searches with a debounced onChange would be a nice UX \n  // but had difficulty getting that to work in a reasonable way - typically \n  // triggered many requests, and race conditions between render, setState, and \n  // the mapping in the Books component \n\n  onSearchSubmit = term => {\n    return fetch(`${this.state.endpoint}/?search=${encodeURIComponent(term)}`).then(res => {\n     return res.json()\n   }).then(json => {\n     const books = json.items\n     return this.setState({\n      ...this.state, \n      books \n    })\n   })\n  }\n\n  render() {\n    return (\n      <div id='react-app'\n      style={{\n        display: \"flex\", \n        \"flex-direction\": \"column\",\n        \"justify-content\": \"space-between\" \n        }}>\n        <Header/>\n        <SearchInput\n         onSubmit={this.onSearchSubmit}/>\n        <Books \n         books={this.state.books}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}